<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="kutac.monitor.current.SysData">
<Super>%DeepSee.KPI</Super>
<TimeCreated>64174,58852.733443</TimeCreated>

<Parameter name="DOMAIN">
<Default>SYSMON</Default>
</Parameter>

<Parameter name="RESOURCE">
</Parameter>

<XData name="KPI">
<Description>
This XData definition defines the KPI.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee/kpi</XMLNamespace>
<Data><![CDATA[
<kpi xmlns="http://www.intersystems.com/deepsee/kpi"
 name="CurrSysData" sourceType="manual"
 caption="Current System Data"
>
<property columnNo="1" name="ID" />
<property columnNo="2" name="DateTime" />
<property columnNo="3" name="SysCPUIdle" />
<property columnNo="4" name="SysCPUKernel" />
<property columnNo="5" name="SysCPUUser" />
<property columnNo="6" name="SysLicUsedDist" />
<property columnNo="7" name="SysLicUsedLocal" />
</kpi>
]]></Data>
</XData>

<Method name="%OnLoadKPI">
<Description>
Notification that this KPI is being executed.
This is a good place to override properties, such as range and threshold.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnGetSQL">
<Description>
Return an SQL statement to execute.</Description>
<FormalSpec><![CDATA[&pSQL:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set pSQL = "SELECT top 1 ID, DateTime, Sys_CPUIdle, Sys_CPUKernel, Sys_CPUUser, Sys_LicUsedDist "_
				"FROM SYS_History.SysData order by DateTime Desc"
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnDashboardAction">
<Description>
This callback is invoked from a dashboard when an action defined by this dashboard is invoked.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pAction:%String,pContext:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// pAction is the name of the action (as defined in the XML list).
	// pContext contains information from the client
	// and can be used to return information.
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnExecute">
<Description>
Get data for this KPI manually.
This is implemented by subclasses that provide manual data.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		&sql(SELECT top 1 ID, DateTime, Sys_CPUIdle, Sys_CPUKernel, Sys_CPUUser, Sys_LicUsedDist
				INTO :ID, :DateTime, :SysCPUIdle, :SysCPUKernel, :SysCPUUser, :SysLicUsedDist
				FROM SYS_History.SysData
				ORDER BY DateTime DESC)
		set ..%data(1,"ID") = ID
		set ..%data(1,"DateTime") = DateTime
		set ..%data(1,"SysCPUIdle") = SysCPUIdle
		set ..%data(1,"SysCPUKernel") = SysCPUKernel
		set ..%data(1,"SysCPUUser") = SysCPUUser
		set ..%data(1,"SysLicUsedDist") = SysLicUsedDist
		set ..%data(1,"SysLicUsedLocal") = $system.License.GetUserLimit()
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>
</Export>
