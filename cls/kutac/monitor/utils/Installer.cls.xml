<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-32) 2015.1 (Build 429U)" ts="2015-07-28 19:41:02">
<Class name="kutac.monitor.utils.Installer">
<TimeChanged>63761,70845.703415</TimeChanged>
<TimeCreated>63732,50627.865496</TimeCreated>

<XData name="Install">
<XMLNamespace>INSTALLER</XMLNamespace>
<Data><![CDATA[
<Manifest>
<IfNotDef Var="Namespace">
<Var Name="Namespace" Value="SYSMON"/>
<Log Text="Set namespace to ${Namespace}" Level="0"/>
</IfNotDef>
<If Condition='(##class(Config.Namespaces).Exists("${Namespace}")=0)'>
<Log Text="Creating namespace ${Namespace}" Level="0"/>
<Namespace Name="${Namespace}" Create="yes" Code="CACHESYS" Ensemble="" Data="CACHESYS">
<Configuration>
<Database Name="${Namespace}" Dir="${MGRDIR}/${Namespace}" Create="yes" MountRequired="true" Resource="%DB_${Namespace}" PublicPermissions="RW" MountAtStartup="true"/>
</Configuration>
<Log Text="Creating web application /csp/${Namespace}" Level="0"/>
<CSPApplication Url='#{$ZCONVERT("/csp/${Namespace}", "L")}' Directory='#{##class(%DeepSee.Report.UI.reportModelServer).GetCSPDirectory()_$ZCONVERT("${Namespace}", "L")}' AuthenticationMethods="64" IsNamespaceDefault="true" />
<RunInstall Class="kutac.monitor.utils.Installer" Method="EnableDeepSee"/>
</Namespace>
 <Log Text="End Creating namespace ${Namespace} and web application /csp/${Namespace}" Level="0"/>
</If>

<Namespace Name="${Namespace}" Create="no">
<IfDef Var="SourceDir">
<Log Text="SourceDir defined - offline install from ${SourceDir}" Level="0"/>
<Import File="${SourceDir}"/>
</IfDef>

<IfNotDef Var="SourceDir">
<Log Text="SourceDir undefined - online install from GitHub" Level="0"/>
<RunInstall Class="kutac.monitor.utils.Installer" Method="DownloadFromGitHub"/>
</IfNotDef>



</Namespace>



<Log Text="Mapping kutac package to choosed namespace" Level="0"/>
<Namespace Name="${Namespace}" Create="no">
<ClassMapping From="${Namespace}" Package="kutac"/> 
</Namespace>



<Log Text="Moving to configuring monitor" Level="0"/>
<RunInstall Class="kutac.monitor.utils.Installer" Method="ConfiguringMonitor"/>


<!--<Log Text="Configuring startup namespace" Level="0"/>
<RunInstall Class="kutac.monitor.utils.Installer" Method="ConfiguringClasses"/>

<Log Text="Activating Monitor Classes" Level="0"/>
<RunInstall Class="kutac.monitor.utils.Installer" Method="ActivatingingClasses"/>

<Log Text="Starting Monitor" Level="0"/>
<RunInstall Class="kutac.monitor.utils.Installer" Method="RunningMonitor"/>-->



</Manifest>
]]></Data>
</XData>

<Method name="setup">
<Description>
 This is a method generator whose code is generated by XGL.
Set pVars("Namespace")="SYSMON"
Set pVars("SourceDir")="C:\temp\SYSMON\cls\kutac\"
do ##class(kutac.monitor.utils.Installer).setup(.pVars)</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[&pVars,pLogLevel:%Integer=0,pInstaller:%Installer.Installer]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[ 	Quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "Install")
]]></Implementation>
</Method>

<Method name="EnableDeepSee">
<ClassMethod>1</ClassMethod>
<FormalSpec>pVars,pLogLevel,tInstaller</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do EnableDeepSee^%SYS.cspServer("/csp/"_$ZCONVERT(pVars("Namespace"), "L")_"/")
	quit $$$OK
]]></Implementation>
</Method>

<Method name="DownloadFromGitHub">
<ClassMethod>1</ClassMethod>
<FormalSpec>pVars,pLogLevel,tInstaller</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set Namespace=tInstaller.Evaluate("${Namespace}")
    Do tInstaller.PushNS("%SYS")
    Set tSC = ..Update(Namespace, "alexandrov-nikita", "deepsee-sysmon-dashboards", "master")
    Do tInstaller.PopNS()
    If $$$ISERR(tSC) Throw ##class(%Installer.Exception).CreateFromStatus(tSC)
    quit $$$OK
]]></Implementation>
</Method>

<Method name="Update">
<ClassMethod>1</ClassMethod>
<FormalSpec>Namespace=$Namespace,Owner:%String="alexandrov-nikita",Repository:%String="deepsee-sysmon-dashboards",Branch:%String,Username:%String,Password:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set namespace = $Namespace
 	Set SSLConfig = "GitHub"
 	Zn "%SYS"
 	Do:'##class(Security.SSLConfigs).Exists(SSLConfig) ##class(Security.SSLConfigs).Create(SSLConfig)

 	Set req=##class(%Net.HttpRequest).%New()
 	Set req.Https=1
	Set req.SSLConfiguration=SSLConfig
	Set req.Server="api.github.com"
	Set req.Location = "repos/" _ Owner _ "/" _ Repository _ "/contents" 	// as described in https://developer.github.com/v3/repos/	
	Do:$d(Branch) req.SetParam("ref",Branch) 								// if omitted the repositoryâ€™s default branch (usually master) would be used
	Do req.SetHeader("Accept","application/vnd.github.v3+json") 			// we want to receive API v3
	
	If ($d(Username) && $d(Password)) {										// supply Username and Passwor, if both are provided. GitHub accept Basic Auth
		Set req.Username = Username											// https://developer.github.com/v3/auth/
	 	Set req.Password = Password
	} 	

 	Set links = ##class(%ListOfDataTypes).%New()
 	Set st = ..ProcessDirectory("",req,.links)
 	Return:$$$ISERR(st) st
 	 	
 	Zn Namespace
	Set st = ..DownloadFiles(links,req,.list)
	Set st2 = $system.OBJ.CompileList(.list)
	Zn namespace
	
 	Return $$$ADDSC(st, st2)
]]></Implementation>
</Method>

<Method name="ProcessDirectory">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Path:%String="",Request:%Net.HttpRequest,&Links:%ListOfDataTypes]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set location = Request.Location
	Set Request.Location = Request.Location _ Path
	
	Set st = Request.Get()
	Return:$$$ISERR(st) st
	Return:(Request.HttpResponse.StatusCode = 404) $$$ERROR($$$GeneralError,"Repository doesn't exist OR you don't have access")
	Return:((Request.HttpResponse.StatusCode = 403) && (Request.HttpResponse.GetHeader("X-RATELIMIT-REMAINING")=0)) $$$ERROR($$$GeneralError,"API rate limit exceeded. Try logging in.")
 	Return:(Request.HttpResponse.StatusCode '= 200) $$$ERROR($$$GeneralError,"Received " _ Request.HttpResponse.StatusCode _ " status, expected 200")
 	
 	#dim objects As List of %ZEN.proxyObject
 	#dim obj As %ZEN.proxyObject
	Set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(Request.HttpResponse.Data,,.objects,1)
	Return:$$$ISERR(st) st
	
	For i = 1:1:objects.Count() {		
		Set obj = objects.GetAt(i)
		If (obj.type = "dir") {
			Set st = ..ProcessDirectory("/"_obj.name,Request,.Links)
			Return:$$$ISERR(st) st		
		} ElseIf (obj.type = "file") {
			Do:..IsCacheFile(obj) Links.Insert(obj."download_url")
		} Else {
			// obj.type = "symlink" or obj.type = "submodule"
		} 
	}
	Set Request.Location = location // to keep track of where in the repository tree we are
	Return $$$OK
]]></Implementation>
</Method>

<Method name="IsCacheFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>File:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set extensions = ",xml,cls,csp,csr,mac,int,bas,inc,gbl,prj,obj,pkg,gof,"
	Return:($L(File.name,".")=1) 0 //no extension
	Set File.Extension = $P(File.name,".",$L(File.name,"."))
	Return $F(extensions,","_$ZCVT(File.Extension,"l")_",")
]]></Implementation>
</Method>

<Method name="DownloadFiles">
<ClassMethod>1</ClassMethod>
<FormalSpec>Links:%ListOfDataTypes,Request:%Net.HttpRequest,*Items</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill Items
	Set Request.Server = "raw.githubusercontent.com"
	Set st = $$$OK
	
	For i = 1:1:Links.Count() {
		Set streq = Request.Get($e(Links.GetAt(i),35,*)) // Remove "https://raw.githubusercontent.com/" from URL.	
		Set:$$$ISERR(streq) st=$$$ADDSC(st, streq)
 		Set stload = $system.OBJ.LoadStream(Request.HttpResponse.Data,"",.error,.items)
 		Set:$$$ISERR(stload) st=$$$ADDSC(st, stload)
 		Merge Items = items
	}
	
	Set Request.Server="api.github.com"
	Return st
]]></Implementation>
</Method>

<Method name="ConfiguringMonitor">
<ClassMethod>1</ClassMethod>
<FormalSpec>pVars,pLogLevel,tInstaller</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set Namespace=tInstaller.Evaluate("${Namespace}")
	Do tInstaller.PushNS("%SYS")
	write !, "Activating Monitor Classes"
	set st2 = ..ActivatingClasses()
	write !, "Starting Monitor"
	set st3 = ..RunningMonitor()
	write !, "Creating Task"
	Do tInstaller.PopNS()
	Do tInstaller.PushNS(Namespace)
	set st4 = ..CreateTask(Namespace)
	Do tInstaller.PopNS()
	set st = $$$ADDSC(st4, $$$ADDSC(st2, st3))
	if $$$ISERR(st) Throw ##class(%Installer.Exception).CreateFromStatus(st)
    quit $$$OK
]]></Implementation>
</Method>

<Method name="ActivatingClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set act = $LISTBUILD("%Monitor.System.HistoryPerf","%Monitor.System.Diskspace","%Monitor.System.License","%Monitor.System.Processes","%Monitor.System.HistorySys","%Monitor.System.Freespace","%Monitor.System.LockTable","%Monitor.System.Routines")
	set str = $LISTTOSTRING(act)
	for i = 1:1:$LISTLENGTH(act)
	{
		set cls = $PIECE(str, ",", i)
		set id = ""
		do ##class(%Monitor.ItemGroup).MetricsClassItemGroup(cls,.id)
 		s class = ##class(%Monitor.ItemGroup).%OpenId(id)
 		if '$IsObject(class)
 		{ 
 			write !,"ERROR: Class '"_cls_"' does not exist",!
 		}
 		else
 		{
	 		set class.Activated = 1
	 		set status = class.%Save()
	 		if ('status) 
	 		{
		 		w $System.Status.GetErrorText(st)
	 		}
 		}
	}
	return $$$OK
]]></Implementation>
</Method>

<Method name="RunningMonitor">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s sc = ##class(%SYS.Monitor).Stop()
	s sc1 = ##class(%SYS.Monitor).Start()
	w !, "System Monitor has been restarted!", !
	return sc1
]]></Implementation>
</Method>

<Method name="CreateTask">
<ClassMethod>1</ClassMethod>
<FormalSpec>Namespace=$Namespace,min:%Integer=90</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	//q ##class(%DeepSee.CubeManager.Task.Synch).Schedule(0, 1, 1, hrs, ($p($H, ",", 2) + 60) # 10800, 0)
	//q ##class(%DeepSee.CubeManager.Task.Build).Schedule(0, 0, 1, "", ($p($H, ",", 2) + 10))
	Set task=##class(%SYS.Task).%New()
	Set task.Name = "Build cubes in "_Namespace
	Set task.NameSpace= Namespace
	Set task.TimePeriod=0 // Daily
	Set task.TimePeriodEvery=1 // Every 1 day
	Set task.DailyFrequency=1 // Run Several times in a day
	Set task.DailyFrequencyTime=0 // Run every x minutes
	Set task.DailyIncrement=min // # of minutes between runs
	Set task.DailyStartTime = 0 // Start at 00:00:00
	Set task.DailyEndTime = 86399 // End at 23:59:59
	Set task.StartDate = $p($H,",",1) // Start today
	
	
	Set taskdef = ##class(kutac.monitor.utils.Task).%New()
	Set taskdef.Namespace = Namespace
	Do task.AssignSettings(taskdef)
	Set task.TaskClass=$classname(taskdef)
	
	Set st = task.%Save()
	Return:$$$ISERR(st) st
	Set id = task.%Id()
	Return ##class(%SYS.Task).RunNow(id)
]]></Implementation>
</Method>
</Class>
</Export>
